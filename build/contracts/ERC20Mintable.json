{
  "contractName": "ERC20Mintable",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "MintFinished",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintingFinished",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finishMinting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the ERC20Mintable. Extension of {ERC20} that adds a minting behaviour.\",\"events\":{\"MintFinished()\":{\"details\":\"Emitted during finish minting\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"finishMinting()\":{\"details\":\"Function to stop minting new tokens. WARNING: it allows everyone to finish minting. Access controls MUST be defined in derived contracts.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"mint(address,uint256)\":{\"details\":\"Function to mint tokens. WARNING: it allows everyone to mint new tokens. Access controls MUST be defined in derived contracts.\",\"params\":{\"account\":\"The address that will receive the minted tokens\",\"amount\":\"The amount of tokens to mint\"}},\"mintingFinished()\":{\"returns\":{\"_0\":\"if minting is finished or not.\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"}},\"title\":\"ERC20Mintable\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"/home/lavandor9/contracts/subscribee-official/contracts/dependencies/MintableERC20.sol\":\"ERC20Mintable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/home/lavandor9/contracts/subscribee-official/contracts/dependencies/MintableERC20.sol\":{\"keccak256\":\"0xb6b2d8672a7c64446ca553ba4c2286034a4e4726ab9b181fbe7a57c4a39d8717\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fe261a59a1ec714511406d20de0204e14f7b4898ee9caed90354f474a3e66006\",\"dweb:/ipfs/QmUAQmVmbsjAvsaCyKpCUyCPsk1NFknSJuG17Wb3Ud2pGT\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xd1d8caaeb45f78e0b0715664d56c220c283c89bf8b8c02954af86404d6b367f8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://300a0cc7be3b26c96c22a47ffa9530a585e1c4f2dba3021d9bf309dc63007487\",\"dweb:/ipfs/QmQmxsvxK6CaJmQ4D8vDCYPLHMqcMmZLcBqedG4GFAbzu9\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2c3d0973630ed74f2b5ce3944677a885dc70ec32fc83b35f55045a10224da32b\",\"dweb:/ipfs/QmbefZ5RoEZKNHXCALfh683PnaNYzKPcKMFjyY1DVAgq8A\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd\",\"dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n/**\n * @title ERC20Mintable\n * @dev Implementation of the ERC20Mintable. Extension of {ERC20} that adds a minting behaviour.\n */\nabstract contract ERC20Mintable is ERC20 {\n\n    // indicates if minting is finished\n    bool private _mintingFinished = false;\n\n    /**\n     * @dev Emitted during finish minting\n     */\n    event MintFinished();\n\n    /**\n     * @dev Tokens can be minted only before minting finished.\n     */\n    modifier canMint() {\n        require(!_mintingFinished, \"ERC20Mintable: minting is finished\");\n        _;\n    }\n\n    /**\n     * @return if minting is finished or not.\n     */\n    function mintingFinished() public view returns (bool) {\n        return _mintingFinished;\n    }\n\n    /**\n     * @dev Function to mint tokens.\n     *\n     * WARNING: it allows everyone to mint new tokens. Access controls MUST be defined in derived contracts.\n     *\n     * @param account The address that will receive the minted tokens\n     * @param amount The amount of tokens to mint\n     */\n    function mint(address account, uint256 amount) public canMint {\n        _mint(account, amount);\n    }\n\n    /**\n     * @dev Function to stop minting new tokens.\n     *\n     * WARNING: it allows everyone to finish minting. Access controls MUST be defined in derived contracts.\n     */\n    function finishMinting() public canMint {\n        _finishMinting();\n    }\n\n    /**\n     * @dev Function to stop minting new tokens.\n     */\n    function _finishMinting() internal virtual {\n        _mintingFinished = true;\n\n        emit MintFinished();\n    }\n}\n",
  "sourcePath": "/home/lavandor9/contracts/subscribee-official/contracts/dependencies/MintableERC20.sol",
  "ast": {
    "absolutePath": "/home/lavandor9/contracts/subscribee-official/contracts/dependencies/MintableERC20.sol",
    "exportedSymbols": {
      "Context": [
        2667
      ],
      "ERC20": [
        2415
      ],
      "ERC20Mintable": [
        1522
      ],
      "IERC20": [
        2493
      ],
      "IERC20Metadata": [
        2645
      ]
    },
    "id": 1523,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1453,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".8"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:23:4"
      },
      {
        "absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
        "file": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
        "id": 1454,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1523,
        "sourceUnit": 2416,
        "src": "57:55:4",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": true,
        "baseContracts": [
          {
            "baseName": {
              "id": 1456,
              "name": "ERC20",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 2415,
              "src": "278:5:4"
            },
            "id": 1457,
            "nodeType": "InheritanceSpecifier",
            "src": "278:5:4"
          }
        ],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 1455,
          "nodeType": "StructuredDocumentation",
          "src": "114:128:4",
          "text": " @title ERC20Mintable\n @dev Implementation of the ERC20Mintable. Extension of {ERC20} that adds a minting behaviour."
        },
        "fullyImplemented": false,
        "id": 1522,
        "linearizedBaseContracts": [
          1522,
          2415,
          2645,
          2493,
          2667
        ],
        "name": "ERC20Mintable",
        "nameLocation": "261:13:4",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 1460,
            "mutability": "mutable",
            "name": "_mintingFinished",
            "nameLocation": "344:16:4",
            "nodeType": "VariableDeclaration",
            "scope": 1522,
            "src": "331:37:4",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 1458,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "331:4:4",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "value": {
              "hexValue": "66616c7365",
              "id": 1459,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "bool",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "363:5:4",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              },
              "value": "false"
            },
            "visibility": "private"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 1461,
              "nodeType": "StructuredDocumentation",
              "src": "375:53:4",
              "text": " @dev Emitted during finish minting"
            },
            "id": 1463,
            "name": "MintFinished",
            "nameLocation": "439:12:4",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 1462,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "451:2:4"
            },
            "src": "433:21:4"
          },
          {
            "body": {
              "id": 1473,
              "nodeType": "Block",
              "src": "558:92:4",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 1468,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "576:17:4",
                        "subExpression": {
                          "id": 1467,
                          "name": "_mintingFinished",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1460,
                          "src": "577:16:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332304d696e7461626c653a206d696e74696e672069732066696e6973686564",
                        "id": 1469,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "595:36:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_f0296ba1e0cd26c09d97cb12c7a2251bdeb7854af8141b03b7f1306fbe6b4984",
                          "typeString": "literal_string \"ERC20Mintable: minting is finished\""
                        },
                        "value": "ERC20Mintable: minting is finished"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_f0296ba1e0cd26c09d97cb12c7a2251bdeb7854af8141b03b7f1306fbe6b4984",
                          "typeString": "literal_string \"ERC20Mintable: minting is finished\""
                        }
                      ],
                      "id": 1466,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        4294967278,
                        4294967278
                      ],
                      "referencedDeclaration": 4294967278,
                      "src": "568:7:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1470,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "568:64:4",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1471,
                  "nodeType": "ExpressionStatement",
                  "src": "568:64:4"
                },
                {
                  "id": 1472,
                  "nodeType": "PlaceholderStatement",
                  "src": "642:1:4"
                }
              ]
            },
            "documentation": {
              "id": 1464,
              "nodeType": "StructuredDocumentation",
              "src": "460:74:4",
              "text": " @dev Tokens can be minted only before minting finished."
            },
            "id": 1474,
            "name": "canMint",
            "nameLocation": "548:7:4",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 1465,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "555:2:4"
            },
            "src": "539:111:4",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 1482,
              "nodeType": "Block",
              "src": "772:40:4",
              "statements": [
                {
                  "expression": {
                    "id": 1480,
                    "name": "_mintingFinished",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1460,
                    "src": "789:16:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 1479,
                  "id": 1481,
                  "nodeType": "Return",
                  "src": "782:23:4"
                }
              ]
            },
            "documentation": {
              "id": 1475,
              "nodeType": "StructuredDocumentation",
              "src": "656:57:4",
              "text": " @return if minting is finished or not."
            },
            "functionSelector": "05d2035b",
            "id": 1483,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "mintingFinished",
            "nameLocation": "727:15:4",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1476,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "742:2:4"
            },
            "returnParameters": {
              "id": 1479,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1478,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1483,
                  "src": "766:4:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1477,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "766:4:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "765:6:4"
            },
            "scope": 1522,
            "src": "718:94:4",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1498,
              "nodeType": "Block",
              "src": "1176:39:4",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 1494,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1486,
                        "src": "1192:7:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1495,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1488,
                        "src": "1201:6:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1493,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2275,
                      "src": "1186:5:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 1496,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1186:22:4",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1497,
                  "nodeType": "ExpressionStatement",
                  "src": "1186:22:4"
                }
              ]
            },
            "documentation": {
              "id": 1484,
              "nodeType": "StructuredDocumentation",
              "src": "818:291:4",
              "text": " @dev Function to mint tokens.\n WARNING: it allows everyone to mint new tokens. Access controls MUST be defined in derived contracts.\n @param account The address that will receive the minted tokens\n @param amount The amount of tokens to mint"
            },
            "functionSelector": "40c10f19",
            "id": 1499,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 1491,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 1490,
                  "name": "canMint",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 1474,
                  "src": "1168:7:4"
                },
                "nodeType": "ModifierInvocation",
                "src": "1168:7:4"
              }
            ],
            "name": "mint",
            "nameLocation": "1123:4:4",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1489,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1486,
                  "mutability": "mutable",
                  "name": "account",
                  "nameLocation": "1136:7:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 1499,
                  "src": "1128:15:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1485,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1128:7:4",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1488,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "1153:6:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 1499,
                  "src": "1145:14:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1487,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1145:7:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1127:33:4"
            },
            "returnParameters": {
              "id": 1492,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1176:0:4"
            },
            "scope": 1522,
            "src": "1114:101:4",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1508,
              "nodeType": "Block",
              "src": "1441:33:4",
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 1505,
                      "name": "_finishMinting",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1521,
                      "src": "1451:14:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 1506,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1451:16:4",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1507,
                  "nodeType": "ExpressionStatement",
                  "src": "1451:16:4"
                }
              ]
            },
            "documentation": {
              "id": 1500,
              "nodeType": "StructuredDocumentation",
              "src": "1221:175:4",
              "text": " @dev Function to stop minting new tokens.\n WARNING: it allows everyone to finish minting. Access controls MUST be defined in derived contracts."
            },
            "functionSelector": "7d64bcb4",
            "id": 1509,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 1503,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 1502,
                  "name": "canMint",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 1474,
                  "src": "1433:7:4"
                },
                "nodeType": "ModifierInvocation",
                "src": "1433:7:4"
              }
            ],
            "name": "finishMinting",
            "nameLocation": "1410:13:4",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1501,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1423:2:4"
            },
            "returnParameters": {
              "id": 1504,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1441:0:4"
            },
            "scope": 1522,
            "src": "1401:73:4",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1520,
              "nodeType": "Block",
              "src": "1588:70:4",
              "statements": [
                {
                  "expression": {
                    "id": 1515,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1513,
                      "name": "_mintingFinished",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1460,
                      "src": "1598:16:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 1514,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1617:4:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "1598:23:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1516,
                  "nodeType": "ExpressionStatement",
                  "src": "1598:23:4"
                },
                {
                  "eventCall": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 1517,
                      "name": "MintFinished",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1463,
                      "src": "1637:12:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 1518,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1637:14:4",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1519,
                  "nodeType": "EmitStatement",
                  "src": "1632:19:4"
                }
              ]
            },
            "documentation": {
              "id": 1510,
              "nodeType": "StructuredDocumentation",
              "src": "1480:60:4",
              "text": " @dev Function to stop minting new tokens."
            },
            "id": 1521,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_finishMinting",
            "nameLocation": "1554:14:4",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1511,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1568:2:4"
            },
            "returnParameters": {
              "id": 1512,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1588:0:4"
            },
            "scope": 1522,
            "src": "1545:113:4",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          }
        ],
        "scope": 1523,
        "src": "243:1417:4",
        "usedErrors": []
      }
    ],
    "src": "32:1629:4"
  },
  "legacyAST": {
    "absolutePath": "/home/lavandor9/contracts/subscribee-official/contracts/dependencies/MintableERC20.sol",
    "exportedSymbols": {
      "Context": [
        2667
      ],
      "ERC20": [
        2415
      ],
      "ERC20Mintable": [
        1522
      ],
      "IERC20": [
        2493
      ],
      "IERC20Metadata": [
        2645
      ]
    },
    "id": 1523,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1453,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".8"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:23:4"
      },
      {
        "absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
        "file": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
        "id": 1454,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1523,
        "sourceUnit": 2416,
        "src": "57:55:4",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": true,
        "baseContracts": [
          {
            "baseName": {
              "id": 1456,
              "name": "ERC20",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 2415,
              "src": "278:5:4"
            },
            "id": 1457,
            "nodeType": "InheritanceSpecifier",
            "src": "278:5:4"
          }
        ],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 1455,
          "nodeType": "StructuredDocumentation",
          "src": "114:128:4",
          "text": " @title ERC20Mintable\n @dev Implementation of the ERC20Mintable. Extension of {ERC20} that adds a minting behaviour."
        },
        "fullyImplemented": false,
        "id": 1522,
        "linearizedBaseContracts": [
          1522,
          2415,
          2645,
          2493,
          2667
        ],
        "name": "ERC20Mintable",
        "nameLocation": "261:13:4",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 1460,
            "mutability": "mutable",
            "name": "_mintingFinished",
            "nameLocation": "344:16:4",
            "nodeType": "VariableDeclaration",
            "scope": 1522,
            "src": "331:37:4",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 1458,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "331:4:4",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "value": {
              "hexValue": "66616c7365",
              "id": 1459,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "bool",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "363:5:4",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              },
              "value": "false"
            },
            "visibility": "private"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 1461,
              "nodeType": "StructuredDocumentation",
              "src": "375:53:4",
              "text": " @dev Emitted during finish minting"
            },
            "id": 1463,
            "name": "MintFinished",
            "nameLocation": "439:12:4",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 1462,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "451:2:4"
            },
            "src": "433:21:4"
          },
          {
            "body": {
              "id": 1473,
              "nodeType": "Block",
              "src": "558:92:4",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 1468,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "576:17:4",
                        "subExpression": {
                          "id": 1467,
                          "name": "_mintingFinished",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1460,
                          "src": "577:16:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332304d696e7461626c653a206d696e74696e672069732066696e6973686564",
                        "id": 1469,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "595:36:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_f0296ba1e0cd26c09d97cb12c7a2251bdeb7854af8141b03b7f1306fbe6b4984",
                          "typeString": "literal_string \"ERC20Mintable: minting is finished\""
                        },
                        "value": "ERC20Mintable: minting is finished"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_f0296ba1e0cd26c09d97cb12c7a2251bdeb7854af8141b03b7f1306fbe6b4984",
                          "typeString": "literal_string \"ERC20Mintable: minting is finished\""
                        }
                      ],
                      "id": 1466,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        4294967278,
                        4294967278
                      ],
                      "referencedDeclaration": 4294967278,
                      "src": "568:7:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1470,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "568:64:4",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1471,
                  "nodeType": "ExpressionStatement",
                  "src": "568:64:4"
                },
                {
                  "id": 1472,
                  "nodeType": "PlaceholderStatement",
                  "src": "642:1:4"
                }
              ]
            },
            "documentation": {
              "id": 1464,
              "nodeType": "StructuredDocumentation",
              "src": "460:74:4",
              "text": " @dev Tokens can be minted only before minting finished."
            },
            "id": 1474,
            "name": "canMint",
            "nameLocation": "548:7:4",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 1465,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "555:2:4"
            },
            "src": "539:111:4",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 1482,
              "nodeType": "Block",
              "src": "772:40:4",
              "statements": [
                {
                  "expression": {
                    "id": 1480,
                    "name": "_mintingFinished",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1460,
                    "src": "789:16:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 1479,
                  "id": 1481,
                  "nodeType": "Return",
                  "src": "782:23:4"
                }
              ]
            },
            "documentation": {
              "id": 1475,
              "nodeType": "StructuredDocumentation",
              "src": "656:57:4",
              "text": " @return if minting is finished or not."
            },
            "functionSelector": "05d2035b",
            "id": 1483,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "mintingFinished",
            "nameLocation": "727:15:4",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1476,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "742:2:4"
            },
            "returnParameters": {
              "id": 1479,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1478,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1483,
                  "src": "766:4:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1477,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "766:4:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "765:6:4"
            },
            "scope": 1522,
            "src": "718:94:4",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1498,
              "nodeType": "Block",
              "src": "1176:39:4",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 1494,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1486,
                        "src": "1192:7:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1495,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1488,
                        "src": "1201:6:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1493,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2275,
                      "src": "1186:5:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 1496,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1186:22:4",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1497,
                  "nodeType": "ExpressionStatement",
                  "src": "1186:22:4"
                }
              ]
            },
            "documentation": {
              "id": 1484,
              "nodeType": "StructuredDocumentation",
              "src": "818:291:4",
              "text": " @dev Function to mint tokens.\n WARNING: it allows everyone to mint new tokens. Access controls MUST be defined in derived contracts.\n @param account The address that will receive the minted tokens\n @param amount The amount of tokens to mint"
            },
            "functionSelector": "40c10f19",
            "id": 1499,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 1491,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 1490,
                  "name": "canMint",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 1474,
                  "src": "1168:7:4"
                },
                "nodeType": "ModifierInvocation",
                "src": "1168:7:4"
              }
            ],
            "name": "mint",
            "nameLocation": "1123:4:4",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1489,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1486,
                  "mutability": "mutable",
                  "name": "account",
                  "nameLocation": "1136:7:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 1499,
                  "src": "1128:15:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1485,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1128:7:4",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1488,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "1153:6:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 1499,
                  "src": "1145:14:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1487,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1145:7:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1127:33:4"
            },
            "returnParameters": {
              "id": 1492,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1176:0:4"
            },
            "scope": 1522,
            "src": "1114:101:4",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1508,
              "nodeType": "Block",
              "src": "1441:33:4",
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 1505,
                      "name": "_finishMinting",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1521,
                      "src": "1451:14:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 1506,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1451:16:4",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1507,
                  "nodeType": "ExpressionStatement",
                  "src": "1451:16:4"
                }
              ]
            },
            "documentation": {
              "id": 1500,
              "nodeType": "StructuredDocumentation",
              "src": "1221:175:4",
              "text": " @dev Function to stop minting new tokens.\n WARNING: it allows everyone to finish minting. Access controls MUST be defined in derived contracts."
            },
            "functionSelector": "7d64bcb4",
            "id": 1509,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 1503,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 1502,
                  "name": "canMint",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 1474,
                  "src": "1433:7:4"
                },
                "nodeType": "ModifierInvocation",
                "src": "1433:7:4"
              }
            ],
            "name": "finishMinting",
            "nameLocation": "1410:13:4",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1501,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1423:2:4"
            },
            "returnParameters": {
              "id": 1504,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1441:0:4"
            },
            "scope": 1522,
            "src": "1401:73:4",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1520,
              "nodeType": "Block",
              "src": "1588:70:4",
              "statements": [
                {
                  "expression": {
                    "id": 1515,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1513,
                      "name": "_mintingFinished",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1460,
                      "src": "1598:16:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 1514,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1617:4:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "1598:23:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1516,
                  "nodeType": "ExpressionStatement",
                  "src": "1598:23:4"
                },
                {
                  "eventCall": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 1517,
                      "name": "MintFinished",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1463,
                      "src": "1637:12:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 1518,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1637:14:4",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1519,
                  "nodeType": "EmitStatement",
                  "src": "1632:19:4"
                }
              ]
            },
            "documentation": {
              "id": 1510,
              "nodeType": "StructuredDocumentation",
              "src": "1480:60:4",
              "text": " @dev Function to stop minting new tokens."
            },
            "id": 1521,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_finishMinting",
            "nameLocation": "1554:14:4",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1511,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1568:2:4"
            },
            "returnParameters": {
              "id": 1512,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1588:0:4"
            },
            "scope": 1522,
            "src": "1545:113:4",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          }
        ],
        "scope": 1523,
        "src": "243:1417:4",
        "usedErrors": []
      }
    ],
    "src": "32:1629:4"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.8+commit.dddeac2f.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.1",
  "updatedAt": "2022-05-09T20:03:53.158Z",
  "devdoc": {
    "details": "Implementation of the ERC20Mintable. Extension of {ERC20} that adds a minting behaviour.",
    "events": {
      "MintFinished()": {
        "details": "Emitted during finish minting"
      }
    },
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "finishMinting()": {
        "details": "Function to stop minting new tokens. WARNING: it allows everyone to finish minting. Access controls MUST be defined in derived contracts."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "mint(address,uint256)": {
        "details": "Function to mint tokens. WARNING: it allows everyone to mint new tokens. Access controls MUST be defined in derived contracts.",
        "params": {
          "account": "The address that will receive the minted tokens",
          "amount": "The amount of tokens to mint"
        }
      },
      "mintingFinished()": {
        "returns": {
          "_0": "if minting is finished or not."
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      }
    },
    "title": "ERC20Mintable",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}